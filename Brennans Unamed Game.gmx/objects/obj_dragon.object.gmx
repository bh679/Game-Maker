<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dragonhead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_dragon) &gt; 1
    instance_destroy()

    
xconst = 0
facing = direction    
startX = x
move = false
COLOR = c_dkgray
NECKSIZE = 90
NECKS = NECKSIZE/10
TAILSIZE = 250
TAILS = TAILSIZE/15
//sprite_index = spr_turn2hellicopter
image_speed = 0.5
grab = false
clawy = 0
claw_image = spr_dragonleg//spr_claw
claw_angle = 0
clawx = 0
vspeed2 = 0
hspeed2 = 0
claw = false
hit = 0
_vspeed2 = 0
c = 0

wingscale = 1.4
wingdex= 0 
wingspeed = 0.1
wingpush = 5/7 * 1/6
drop = 8/13 * 1/6

direction = 0
bodyx = x
bodyy = y
bodya = direction
bodyimage_xscale = 1
bodyxspeed = 0
bodyyspeed = 0

//constants
BDYACC = 0.5
BDYR = 0.048

x = x+lengthdir_x(NECKSIZE,-45)
y = x+lengthdir_y(NECKSIZE,-45)
headx = x
heady = y
headindex = 0
heada = direction
_vspeed = 0
_hspeed = 0

dis = point_distance(headx,heady,bodyx+lengthdir_x(38,bodya),bodyy+lengthdir_y(38,bodya))/2
//necks
for(i = 0; i &lt; NECKS; i += 1)
{
    neckx[i] = x + lengthdir_x(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
    necky[i] = y + lengthdir_y(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
    necka[i] = direction    
}

//taildis = point_distance(headx,heady,bodyx+lengthdir_x(38,bodya),bodyy+lengthdir_y(38,bodya))/2

//tails
for(i = 0; i &lt; TAILS; i += 1)
{
    lastx[i] = bodyx - 15
    lasty[i] = bodyy
    tailx[i] = lastx[i]
    taily[i] = lasty[i]
    taila[i] = direction    
}

offscreenBuffer = 150
iniFirespeed = 7
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sound_fire = false
woosh = fx_wing1
breath = fx_fire1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sound_fire = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += _hspeed
y += _vspeed

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>position body</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
headx = x
heady = y
heada = facing


/////////////////////////////////////////////////////////////////////////////////
//move body x
/////////////////////////////////////////////////////////////////////////////////

//neck stretched right
if headx &gt; bodyx+NECKSIZE
{
    bodyxspeed = max(bodyxspeed-BDYACC,_hspeed*max(dis/NECKSIZE,1))
    bodyimage_xscale = -1
}

//neck stretched left
else if headx &lt; bodyx-NECKSIZE
{
    bodyxspeed = min(bodyxspeed+BDYACC,_hspeed*max(dis/NECKSIZE,1))
    bodyimage_xscale = 1
}

//head left of body
else if headx &lt; bodyx
    bodyimage_xscale = 1

//head right of body
else if headx &gt; bodyx
    bodyimage_xscale = -1
    

/////////////////////////////////////////////////////////////////////////////////
//MOVE BODY   y  
/////////////////////////////////////////////////////////////////////////////////

//neck strectched down
if heady &gt; bodyy+NECKSIZE*half
   bodyyspeed = max(bodyyspeed-BDYACC,_vspeed*max(dis/NECKSIZE,1))
//neck stretched up
else if heady &lt; bodyy-NECKSIZE*half
    bodyyspeed = min(bodyyspeed+BDYACC,_vspeed*max(dis/NECKSIZE,1))
//move body when still
else if heady &lt; bodyy-30 or heady &gt; bodyy-30 and bodyyspeed &lt;= 0
    bodyyspeed = bodyyspeed-(bodyy-40-heady)/400
    
    
nearground = (bodyy+15 &gt;= ground and bodyxspeed &lt;= 2 and bodyxspeed &gt;= -2)
    
//if nearground else
if nearground and floor(wingdex) mod 13 = 11 
    wingspeed = 0
else if _vspeed &lt; 1 or (nearground and floor(wingdex) mod 13 != 11 )
    wingspeed = -(_vspeed)/50 + abs(_hspeed)/50 + 1/10//abs(_hspeed)/200 + ((_vspeed-1)/200)*(_vspeed-1 &lt; 0)
else 
    wingspeed = 0
    
wingdex+=wingspeed* (13/7);

//wing push
if (wingdex mod 13) &gt;= 0 and wingdex mod 13 &lt;= 7
{
        temppush = wingpush*(abs(_hspeed/3)/2+1)
        //if body is higher
        if heady &gt; bodyy - NECKSIZE*2/3
            temppush = wingpush*(abs(_hspeed/3)/2+1)*7/10
        bodyyspeed -= temppush       
}
else
    bodyyspeed += drop


//keep body near head
if dis &gt; NECKSIZE*7/6
{
    bodyxspeed = - bodyx/2 + headx/2//min(bodyx/2 + headx/2,10)
    bodyyspeed = - bodyy/2 + heady/2//min(bodyy/2 + heady/2,10)
}



//resistance
if bodyxspeed &gt; 0
    bodyxspeed -= BDYR
else if bodyxspeed &lt; 0
    bodyxspeed += BDYR

//apply bodyspeed
bodyx += bodyxspeed
bodyy += bodyyspeed

if bodyy + (10) &gt; ground
    bodyy = ground - (10)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Tail
MINTAILSIZE = 2
MAXTAILSIZE = 5
g = 1-(abs(bodyxspeed)/6)*1
avg = 0
for(i = TAILS-1; i &gt; 0; i-=1)
    avg += lasty[i]
    
for(i = TAILS-1; i &gt; 0; i-=1)
{
    if point_distance(lastx[0],0,lastx[1],0) &gt; MINTAILSIZE//round((lastx[0]/xMINTAIL))*xMINTAIL != round(lastx[1]) and hspeed != 0
        lastx[i] = lastx[i-1]
    if point_distance(0,lasty[0],0,lasty[1]) &gt; MINTAILSIZE//round((lasty[0]/yMINTAIL))*yMINTAIL != round(lasty[1]) and vspeed != 0
        lasty[i] = lasty[i-1]
    if avg &gt; lasty[0] and point_distance(0,lasty[i],0,lasty[i-1]) &lt; MAXTAILSIZE
        lasty[i] += g*(i/TAILS)
}

lastx[0] = bodyx+lengthdir_x(-16,bodya+180+7)
lasty[0] = bodyy+lengthdir_y(-16,bodya+180+7)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
y = min(y,ground)

if move = true
{
    //move
    if _hspeed &gt; 0
    {
        _hspeed -= 0.1
        image_xscale = -1
    }
    else if _hspeed &lt; 0
    {
        _hspeed += 0.1
        image_xscale = 1   
    }
    if _vspeed &gt; 0
        _vspeed -= 0.1
    else if _vspeed &lt; 0
        _vspeed += 0.1
    
    //turns into player start
    if (keyboard_check(ord('Z')) or hit &gt; 10) and image_speed != -0.4
    {
        sprite_index = spr_turn2hellicopter
        image_index = 12
        image_speed = -0.4
    }
    
    //if head is near body
    if dis &lt; NECKSIZE*5/6
    {
        //left
        if keyboard_check(ord('D'))
            _hspeed = min(1+_hspeed,6)
        //right
        if keyboard_check(ord('A'))
            _hspeed = max(_hspeed-1,-6)
        //up
        if keyboard_check(ord('W'))
            _vspeed = max(_vspeed-1.5,-5)
        //down
        if keyboard_check(ord('S'))
            _vspeed = min(_vspeed+1.5,5)
    }
    else
    {
        //left
        if keyboard_check(ord('D'))
            _hspeed = min(0.4+_hspeed,5)
        //right
        if keyboard_check(ord('A'))
            _hspeed = max(_hspeed-0.4,-5)
        //up
        if keyboard_check(ord('W'))
            _vspeed = max(_vspeed-0.9,-4)
        //down
        if keyboard_check(ord('S'))
            _vspeed = min(_vspeed+0.9,4)
    }
    
    image_angle = -_hspeed*4
}

//limits for vertical axis
y = min(y,ground)

obj_earth.angle += (x - startX)/10
startX = x
/*
//jump from screens
if x &gt; room_width + offscreenBuffer
{
    var tmpdis;
    tmpdis = x - bodyx
    x = -50
    bodyx -= (room_width+50)+tmpdis
    
    for(i = 0; i &lt; NECKS; i+= 1)
        neckx[i] -= room_width+50
}
else if x &lt; -offscreenBuffer
{
    var tmpdis;
    tmpdis = x - bodyx
    x = room_width + 50
    bodyx += (room_width+50)+abs(tmpdis)
    for(i = 0; i &lt; NECKS; i+= 1)
        neckx[i] += room_width+50
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//bobbing
if (wingdex mod 7) &gt;= 0 and wingdex mod 7 &lt;= 3
    _vspeed -= wingpush/3
else
    _vspeed += drop/3


tempv = _vspeed
temph = _hspeed      

if abs(_hspeed) &lt; 1
    _vspeed = round(_vspeed)
if _vspeed != 0 and _hspeed != 0
    direction = point_direction(0,0,_hspeed,_vspeed)
facing = direction    

_vspeed = tempv
_hspeed = temph

headindex = 0
//fire
if keyboard_check(vk_space)
{
    if sound_fire = false
    {
        sound_play(breath)
        sound_fire = true
        alarm[2] = 30*0.9
    }
    headindex = 2
    fire = instance_create(x+xconst,y,obj_fire)
    fire.speed = sqrt(abs(_vspeed^2+_hspeed^2))+iniFirespeed
    fire.direction = direction+random(10)-5
}
else if sound_isplaying(breath)
{
    sound_stop(breath)
    sound_fire = false
}

//wing woosh
if round(wingdex) mod 13 = 1 and wingspeed &gt; 0
{
    if random(2) = 1
        woosh = fx_wing1
    else
        woosh = fx_wing2
    sound_play(woosh)
}

//kill
if keyboard_check_pressed(vk_enter)
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//sprite_index = spr_helicopter
move = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
bodya = point_direction(headx,heady,bodyx+lengthdir_x(38,bodya),bodyy+lengthdir_y(38,bodya))
dis = point_distance(headx,heady,bodyx+lengthdir_x(38,bodya),bodyy+lengthdir_y(38,bodya))/2

//back wing
draw_sprite_ext(spr_dragonwings,wingdex,bodyx,bodyy,-bodyimage_xscale*4/5*wingscale,wingscale,0,COLOR,1)

draw_set_color(c_black)
draw_set_alpha(1)

dir = (point_direction(lastx[0],lasty[0],lastx[TAILS-1],lasty[TAILS-1]) mod 360)
xtaillength = point_distance(lastx[0],0,lastx[TAILS-1],0)   //lastx[TAILS-1]-lastx[0]
ytaillength = point_distance(0,lasty[0],0,lasty[TAILS-1])  //lasty[TAILS-1]-lasty[0]  
xsinrate = (TAILSIZE-xtaillength)/(TAILSIZE/15)
ysinrate = (TAILSIZE-ytaillength)/(TAILSIZE/15)
c -= (xtaillength/TAILSIZE)+0.1;

//tail
for(i = TAILS-1; i &gt;= 0; i -= 1)
{
    if (dir &lt; 360 and dir &gt; 270) or (dir &lt; 180 and dir &gt; 90)
    {
        tailx[i] = lastx[i]+sin(i/3+c)*xsinrate*(i/TAILS)
        taily[i] = lasty[i]-sin(i/3+c)*ysinrate*(i/TAILS)
    }
    else
    {
        tailx[i] = lastx[i]+sin(i/3+c)*xsinrate*(i/TAILS)
        taily[i] = lasty[i]+sin(i/3+c)*ysinrate*(i/TAILS)
    }
    draw_sprite_ext(spr_dragonneck,1,tailx[i],taily[i],0.9,1.5-i/12,taila[i],COLOR,1)
}

//neck
for(i = NECKS-1; i &gt;= 0; i -= 1)
{
    if i = 0
    {
        neckx[0] = x + lengthdir_x(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
        necky[0] = y + lengthdir_y(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
    }
    else
    {
        newx = x + lengthdir_x(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
        newy = y + lengthdir_y(NECKSIZE*i/NECKS*(dis/NECKSIZE),bodya)
        neckx[i] = (NECKS-i)*neckx[i-1]/NECKS+i*newx/NECKS
        necky[i] = (NECKS-i)*necky[i-1]/NECKS+i*newy/NECKS
   // necka[i] = bodya
   }
    draw_sprite_ext(spr_dragonneck,1,neckx[i],necky[i],0.9,0.4+i/NECKS,necka[i],COLOR,1)
}

draw_sprite_ext(spr_dragonbody,1,bodyx,bodyy,1,bodyimage_xscale,bodya,COLOR,1)


//Legs
lega = bodya - bodyxspeed*10
legx = bodyx + lengthdir_x(10,bodya-30*bodyimage_xscale)//*bodyimage_xscale
legy = bodyy + lengthdir_y(10,bodya-30*bodyimage_xscale)//*bodyimage_xscale

draw_sprite_ext(spr_dragonleg,1,legx,legy,1,bodyimage_xscale,lega,COLOR,1)

//front wing
draw_sprite_ext(spr_dragonwings,wingdex,bodyx,bodyy,bodyimage_xscale*wingscale,wingscale,0,COLOR,1)

with(obj_fire)
    {draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,direction,image_blend,image_alpha)}

draw_sprite_ext(spr_dragonhead,headindex,headx,heady,1,-image_xscale,heada,COLOR,1)*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_dragon()
//draw_drago_flat()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
