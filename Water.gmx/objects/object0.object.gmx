<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0
wavesOnScreen = 2
waveSpeed = 1
waveHeight = 20
waterheight = room_height/2
waterAlpha = 0.5
waterColor = c_blue
waterDensity = 4
detail = false
rippleSize = 30

_gravity = 0.98

blockx = room_width/2
blocky = room_height
blockyspeed = 0
blockheight = 40
blockwidth = 20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer += 1


if keyboard_check(vk_left)
    waveSpeed -= 1
if keyboard_check(vk_right)
    waveSpeed += 1
    
if keyboard_check(vk_up)
    waveHeight -= 1
if keyboard_check(vk_down)
    waveHeight += 1
    
if keyboard_check(ord('W'))
    wavesOnScreen -= 1
if keyboard_check(ord('S'))
    wavesOnScreen += 1
    
if keyboard_check_pressed(vk_space)
    detail = !detail
    
    
y = sin((blockx)*pi/room_width * wavesOnScreen+timer*waveSpeed/30)*waveHeight*(random(5)/10+0.8) + waterheight

if blocky &gt; y
{
    blockyspeed += (y - blocky)/1000 - 1/10
    blockyspeed -= (blockwidth * blockyspeed)/1000
}

blockyspeed += _gravity/10

//resisitance
if blockyspeed &lt;&gt; 0
    blockyspeed -= (blockwidth * blockyspeed)/1000//*blockwidth)

blocky += blockyspeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0,0,"Waves: " + string(wavesOnScreen) +  " W/S")
draw_text(0,20,"Wave Speed: " + string(waveSpeed) +  " Left/Right")
draw_text(0,40,"Wave Height: " + string(waveHeight) +  " Up/Down")
draw_text(0,60,"Floaty bits: " + string(detail) +  " SPACE")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw object
draw_set_alpha(1)
draw_set_color(c_gray)
draw_rectangle(blockx+blockwidth/2,blocky+blockheight/2,blockx-blockwidth,blocky-blockheight/2,false)
draw_set_color(c_black)
draw_rectangle(blockx+blockwidth/2,blocky+blockheight/2,blockx-blockwidth,blocky-blockheight/2,true)


//draw water
for(x = 0; x  &lt; room_width; x += 1)
{
    random_set_seed(floor(x/rippleSize))
    ran = random(5)
    
    xmod10 = x mod rippleSize
    if xmod10 &lt; 5
    {
        random_set_seed(floor((x-1)/rippleSize))
        ran1 = random(5)
        ran2 = ran
        ranVal = ran1*((rippleSize/2) mod (rippleSize/2))        /(rippleSize/2)
               + ran2*((rippleSize/2) - x mod rippleSize/2)      /(rippleSize/2)
    }
    else// if xmod10 &gt; 5
    {
        random_set_seed(floor((x+1)/rippleSize))
        ran2 = random(5)
        ran1 = ran
        ranVal = ran1 * ((rippleSize/2) - x mod (rippleSize/2))   / (rippleSize/2)
               + ran2 * (x mod (rippleSize/2))                    / (rippleSize/2)
    }
    
    y = sin((x)*pi/room_width * wavesOnScreen+timer*waveSpeed/30)*waveHeight*1 + waterheight
    if detail
        y = sin((x)*pi/room_width * wavesOnScreen+timer*waveSpeed/30)*waveHeight*((ranVal)/10+0.8) + waterheight
    y2 = sin((x+1)*pi/room_width * wavesOnScreen+timer*waveSpeed/30)*waveHeight + waterheight
    draw_set_alpha(waterAlpha)
    draw_set_color(waterColor)
    if !detail
        draw_line(x,y,x+1,y2)
    draw_rectangle(x,y,x+1,room_height,false)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
