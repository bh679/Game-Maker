<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>centerx = room_width/2
centery = room_height/2

timer = 0
colorSpeed = 1/1000

holeSize = room_width/3


spots = 20
for(i = 0; i &lt; spots; i+=1)
{
    spotBack[i] = floor(random(2))
    spotx[i] = centerx
    spoty[i] = centery
    spotz[i] = 0
    spotCol[i] = c_red
    spotSpeed[i] = 2 + random(5)
    spotDirection[i] = random(360)
}

dots = 20
dotSpeed = 2 + random(5)
dotDirection = 0
for(i = 0; i &lt; spots; i+=1)
{
    dotBack[i] = floor(random(2))
    dotx[i] = centerx
    doty[i] = centery - holeSize*i/(spots/2)
    dotz[i] = 0
    dotCol[i] = c_black
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//background
draw_set_color(c_black)
draw_rectangle(0,0,room_width,room_height,false)
draw_set_color(c_white)
draw_circle(centerx,centery,holeSize + 5*holeSize/100,true)
col1 = make_color(
                  sin(timer*colorSpeed/pi*180)*200/2+200/2,
                  cos(timer*colorSpeed/pi*180)*200/2+200/2,
                  sin(timer*colorSpeed/pi*180*100/102)*200/2+200/2
                 )
col2 = c_black
draw_circle_color(centerx,centery,holeSize,c_white,merge_color(col1,col2,0.1),false)
draw_set_color(c_black)
//draw_line(centerx,0,centerx,room_height)
//draw_line(0,centery,room_width,centery)


//spots
for(i = 0; i &lt; dots; i += 1)
{
    spotDirection[i] += 1*spotBack[i]
    spotx[i] = spotx[i] + lengthdir_x(spotSpeed[i],spotDirection[i])
    spoty[i] = spoty[i] + lengthdir_y(spotSpeed[i],spotDirection[i])
    drawx = spotx[i]
    drawy = spoty[i]
    
    
    distancefromCenter = point_distance(drawx,drawy,centerx,centery)
    directionfromCenter = point_direction(drawx,drawy,centerx,centery)
    
    rotationanDistancefromCenter = holeSize-distancefromCenter
    
    if rotationanDistancefromCenter &lt; 0
    {
        if spotBack[i] = -1
            spotBack[i] = 1
        else
            spotBack[i] = -1
        spotx[i] = centerx + lengthdir_x(holeSize-spotSpeed[i],directionfromCenter) * spotBack[i]
        spoty[i] = centery + lengthdir_y(holeSize-spotSpeed[i],directionfromCenter) * spotBack[i]
        drawx = spotx[i]
        drawy = spoty[i]       
    }
    
    //spotCol[i] = merge_color(spotCol[i],make_color(sin(drawx/holeSize+i)*255/2+255/2,cos(drawy/holeSize+i)*255/2+255/2,sin(drawx/(holeSize*2)+drawy/(holeSize*2)+i)*255/2+255/2),0.1)
    
    xscale = sin(rotationanDistancefromCenter*pi/holeSize/2)//(rotationanDistancefromCenter)/(holeSize)
    
    draw_sprite_ext(spr_circle,0,drawx,drawy,xscale,1,directionfromCenter,merge_color(col1,c_black,0.5),1)
    
}   

draw_set_color(c_black)
//dots
for(i = 0; i &lt; spots; i += 1)
{
    dotx[i] = dotx[i] + lengthdir_x(dotSpeed*sin(90-point_distance(0,doty[i],0,centery)*(90)/holeSize),dotDirection)
    doty[i] = doty[i] + lengthdir_y(dotSpeed,dotDirection)
    drawx = dotx[i]
    drawy = doty[i]
    
    
    distancefromCenter = point_distance(drawx,drawy,centerx,centery)
    directionfromCenter = point_direction(drawx,drawy,centerx,centery)
    
    rotationanDistancefromCenter = holeSize-distancefromCenter
    
    if rotationanDistancefromCenter &lt; 0
    {
        dotx[i] = centerx + lengthdir_x(holeSize-spotSpeed[i],directionfromCenter) 
        doty[i] = centery + lengthdir_y(holeSize-spotSpeed[i],directionfromCenter) 
        drawx = dotx[i]
        drawy = doty[i]       
    }
    
    xscale = sin(rotationanDistancefromCenter*pi/holeSize/2)//(rotationanDistancefromCenter)/(holeSize)
    
    draw_sprite_ext(spr_circle,0,drawx,drawy,xscale,1,directionfromCenter,spotCol[i],1)
    
    if 1 = 2//debuggin
    {
        draw_line(drawx,drawy,centerx,centery)
        draw_text(mouse_x/2 + centerx/2, mouse_y/2 + centery/2, string(distancefromCenter))
        draw_text(mouse_x, mouse_y+10, string(xscale) + " " + string(yscale))
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
